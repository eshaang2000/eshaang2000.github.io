<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-02T21:21:29-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Eshaan Gandhi</title><subtitle>A blog about my notes, and stuff I find interesting.</subtitle><entry><title type="html">Estimating Pi</title><link href="http://localhost:4000/Pi/" rel="alternate" type="text/html" title="Estimating Pi" /><published>2020-09-02T00:00:00-04:00</published><updated>2020-09-02T00:00:00-04:00</updated><id>http://localhost:4000/Pi</id><content type="html" xml:base="http://localhost:4000/Pi/">&lt;p&gt;Let’s say we have to estimate the value of Pi using a random number generator. You can think of a MonteCarlo simulator as throwing a lot of darts at a board.&lt;/p&gt;

&lt;p&gt;Now lets say the board was a unit square with a unit quadrant like the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;MonteCarlo.png&quot; alt=&quot;Dart Board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we throw a lot of darts onto this board &lt;strong&gt;randomly&lt;/strong&gt;. The probability of being inside the quadrant is going the be the &lt;script type=&quot;math/tex&quot;&gt;Area of Quadrant/Area of Square&lt;/script&gt;. We count the numbers of darts that actually landed inside the quadrant and those that did not. If we run this a lot of times, we get a pretty good estimate of the  probability of the dart landing inside the the quadrant.&lt;/p&gt;

&lt;p&gt;So we now get&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Number of times dart is inside the quadrant/number of total darts thrown = Area of Quadrant/Area of Square&lt;/script&gt;

&lt;p&gt;Now we used unit squares and quadrants so Area of Quadrant is &lt;script type=&quot;math/tex&quot;&gt;\pi/4&lt;/script&gt; and Area of the Square is 1. So if we just multiply the Probability we got by 4, we get the value of Pi&lt;/p&gt;

&lt;p&gt;Here’s my python code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;outside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We do 10,000 trials
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# distance from origin
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The Estimated value of pi is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>EshaanGandhi</name></author><category term="blog" /><category term="Math" /><category term="Probability" /><summary type="html">Let’s say we have to estimate the value of Pi using a random number generator. You can think of a MonteCarlo simulator as throwing a lot of darts at a board.</summary></entry><entry><title type="html">Boyer–Moore Majority Vote Algorithm</title><link href="http://localhost:4000/BoyerMooreVotingAlgo/" rel="alternate" type="text/html" title="Boyer–Moore Majority Vote Algorithm" /><published>2020-08-17T00:00:00-04:00</published><updated>2020-08-17T00:00:00-04:00</updated><id>http://localhost:4000/BoyerMooreVotingAlgo</id><content type="html" xml:base="http://localhost:4000/BoyerMooreVotingAlgo/">&lt;p&gt;Let’s get straight into it. The problem that I came across was as follows:&lt;/p&gt;

&lt;p&gt;Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.&lt;/p&gt;

&lt;p&gt;To understand the problem better imagine that an area is conducting an election where for a candidate to win, they have to get more that 50% of the votes. Each candidate is given a numberical id and every time someone votes for the candidate we add the id to the array. So if the array is [7, 7, 9, 10] someone came in voted for candidate number 7, then someone else came in voted for 7 again. Then someone else came in and voted for candidate number 9. So and so forth we populate the array. Since there are going to be a lot of votes we need to find a quick way to get the majority element. This is where this algorithm shines.&lt;/p&gt;

&lt;p&gt;Basically we want to see if there is one over powering element like in an election. One number vs all the numbers in the array.&lt;/p&gt;

&lt;p&gt;Let the array be
[7, 3, 7, 9, 7, 6, 7, 7, 7, 8, 9]&lt;/p&gt;

&lt;p&gt;The length of this array is 11 and there are 6 ‘7’ elements. This makes the desired answer as 7.&lt;/p&gt;

&lt;p&gt;The algorihtm basically divides and kills the array. For eg:&lt;/p&gt;

&lt;p&gt;[7, 3] [7, 9] [7, 6] [7, 7, 7, 8, 9]&lt;/p&gt;

&lt;p&gt;Let’s look at the first block: [7, 3] - if this section of the array was disregarded from the array, it would make no difference to the election, because the both ‘cancel’ each other. So let’s look at the code for this algorithm&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;majorityElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;contender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the problem on leetcode - &lt;a href=&quot;https://leetcode.com/problems/majority-element/&quot;&gt;https://leetcode.com/problems/majority-element/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the complexity analysis: We only went through the array once so this would be O(n) time.&lt;/p&gt;</content><author><name>EshaanGandhi</name></author><category term="blog" /><category term="Algorithms" /><category term="Coding" /><summary type="html">Let’s get straight into it. The problem that I came across was as follows:</summary></entry><entry><title type="html">The Ant Problem</title><link href="http://localhost:4000/Ants/" rel="alternate" type="text/html" title="The Ant Problem" /><published>2020-08-03T00:00:00-04:00</published><updated>2020-08-03T00:00:00-04:00</updated><id>http://localhost:4000/Ants</id><content type="html" xml:base="http://localhost:4000/Ants/">&lt;h1 id=&quot;trading-interview-problem&quot;&gt;Trading Interview Problem&lt;/h1&gt;

&lt;!-- During Fall 2020, I saw one of my friends take a &quot;probability&quot; quiz for some trading position. I thought the questions were pretty nice. Then I took an actual probability class at school. It was fun and hard at the same time. Here I will compile a list of all probability problems that I found interesting. --&gt;

&lt;p&gt;So let’s dive right in:&lt;/p&gt;

&lt;p&gt;This one is not really probability but still interesting and fun.&lt;/p&gt;

&lt;p&gt;Q. A horizontal stick is one metre long. Fifty ants are placed in random positions on the stick, pointing in random directions. The ants crawl head first along the stick, moving at one metre per minute. If an ant reaches the end of the stick, it falls off. If two ants meet, they both change direction. How long do you have to wait to be sure that all the ants have fallen off the stick?&lt;/p&gt;

&lt;p&gt;A. Super fun question like I said. First look at the base case. What is the maximum time an ant would take to fall of the plank if it was the only one on the plank. Since it’s a 1 meter plank, at most the ant would take 1 minute to fall off.&lt;/p&gt;

&lt;p&gt;Now the collisions: long story short - the collisions dont matter. When two ants collide they switch directions. Assuming that they don’t take anytime switching directions, the number of ants moving in either direction remain the same. Since ants are indistinguashable, the “energy” (for lack of a better word) one ant is carrying keeps on going in the same direction and maintains its speed until it falls off.&lt;/p&gt;</content><author><name>eshaan</name></author><category term="blog" /><category term="Math" /><summary type="html">Trading Interview Problem</summary></entry><entry><title type="html">Couch to 5K</title><link href="http://localhost:4000/Couch25K/" rel="alternate" type="text/html" title="Couch to 5K" /><published>2020-07-23T00:00:00-04:00</published><updated>2020-07-23T00:00:00-04:00</updated><id>http://localhost:4000/Couch25K</id><content type="html" xml:base="http://localhost:4000/Couch25K/">&lt;h1 id=&quot;i-really-dislike-running&quot;&gt;I Really Dislike Running&lt;/h1&gt;

&lt;p&gt;Well I don’t know the reason. It might be because it can be just too hard. So, I never really understood the need to run. I could do other forms of excerice. Then the covid 19 pandemic hit. I was left without a gym or weights to use. This is now forcing me to run to maintain (honestly, to rebuild) cardiovascular fitness. I tried running but just did not have a plan of what to do. After searching for an effective plan, I decided to give Couch to 5k a try. Now let’s see how that goes.&lt;/p&gt;

&lt;p&gt;Update 1:&lt;/p&gt;

&lt;p&gt;I feel like I am making good progress. I’ve slowly getting my lungs up to speed to pre-covid levels. Just finished Week 4, and got pretty close to a 5k.&lt;/p&gt;

&lt;p&gt;Update 2:&lt;/p&gt;

&lt;p&gt;Just finished Week 6. Again making good progress, especially considering I have never actually run seriously before. Will upload run data from all workouts soon&lt;/p&gt;</content><author><name>EshaanGandhi</name></author><category term="blog" /><category term="C25K" /><category term="Fitness" /><category term="Running" /><summary type="html">I Really Dislike Running</summary></entry></feed>